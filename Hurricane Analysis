# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]
# 1. Update Recorded Damages
def update_damages(damages):
    conversion = {"M": 1000000, "B": 1000000000}
    updated_damages = []
    for damage in damages:
        if damage == "Damages not recorded":
            updated_damages.append(damage)
        else:
            if damage[-1] in conversion:
                updated_damages.append(float(damage[:-1]) * conversion[damage[-1]])
            else:
                updated_damages.append(float(damage))
    return updated_damages

# 2. Create a Hurricane Dictionary
def create_hurricane_dict(names, months, years, winds, areas, damages, deaths):
    hurricane_dict = {}
    for i in range(len(names)):
        hurricane_dict[names[i]] = {
            'Name': names[i], 
            'Month': months[i], 
            'Year': years[i], 
            'Max Sustained Wind': winds[i], 
            'Areas Affected': areas[i], 
            'Damage': damages[i], 
            'Deaths': deaths[i]
        }
    return hurricane_dict

# 3. Organizing Hurricanes by Year
def organize_by_year(hurricane_dict):
    hurricanes_by_year = {}
    for hurricane in hurricane_dict.values():
        year = hurricane['Year']
        if year not in hurricanes_by_year:
            hurricanes_by_year[year] = []
        hurricanes_by_year[year].append(hurricane)
    return hurricanes_by_year

# 4. Counting Damaged Areas
def count_affected_areas(hurricane_dict):
    area_count = {}
    for hurricane in hurricane_dict.values():
        for area in hurricane['Areas Affected']:
            if area not in area_count:
                area_count[area] = 0
            area_count[area] += 1
    return area_count

# 5. Calculating Maximum Hurricane Count
def find_most_affected_area(area_count):
    return max(area_count.items(), key=lambda x: x[1])

# 6. Calculating the Deadliest Hurricane
def find_deadliest_hurricane(hurricane_dict):
    return max(hurricane_dict.items(), key=lambda x: x[1]['Deaths'])

# 7. Rating Hurricanes by Mortality
def categorize_by_mortality(hurricane_dict):
    mortality_scale = {0: 0, 1: 100, 2: 500, 3: 1000, 4: 10000}
    hurricanes_by_mortality = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
    for hurricane in hurricane_dict.values():
        death = hurricane['Deaths']
        for rating, upper_bound in mortality_scale.items():
            if death <= upper_bound:
                hurricanes_by_mortality[rating].append(hurricane)
                break
        else:
            hurricanes_by_mortality[5].append(hurricane)
    return hurricanes_by_mortality

# 8. Calculating Hurricane Maximum Damage
def find_max_damage_hurricane(hurricane_dict):
    max_damage_hurricane = max((h for h in hurricane_dict.values() if isinstance(h['Damage'], (int, float))), 
                               key=lambda x: x['Damage'], default=None)
    return max_damage_hurricane

# 9. Rating Hurricanes by Damage
damage_scale = {0: 0, 1: 100000000, 2: 1000000000, 3: 10000000000, 4: 50000000000}
def categorize_by_damage(hurricane_dict, damage_scale):
    hurricanes_by_damage = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
    for hurricane in hurricane_dict.values():
        damage = hurricane['Damage']
        if damage == "Damages not recorded":
            hurricanes_by_damage[0].append(hurricane)
        else:
            for rating, upper_bound in damage_scale.items():
                if damage <= upper_bound:
                    hurricanes_by_damage[rating].append(hurricane)
                    break
            else:
                hurricanes_by_damage[5].append(hurricane)
    return hurricanes_by_damage

# Test the functions and print the outputs

# 1. Test Update Recorded Damages
updated_damages = update_damages(damages)
print("Updated Damages:")
print(updated_damages)
print("\n")

# 2. Create and view the hurricanes dictionary
hurricane_dict = create_hurricane_dict(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)
print("Hurricane Dictionary:")
print(hurricane_dict)
print("\n")

# 3. Organize hurricanes by year
hurricanes_by_year = organize_by_year(hurricane_dict)
print("Hurricanes by Year:")
print(hurricanes_by_year)
print("\n")

# 4. Count affected areas
affected_areas_count = count_affected_areas(hurricane_dict)
print("Affected Areas Count:")
print(affected_areas_count)
print("\n")

# 5. Find most affected area
most_affected_area = find_most_affected_area(affected_areas_count)
print("Most Affected Area:")
print(most_affected_area)
print("\n")

# 6. Find deadliest hurricane
deadliest_hurricane = find_deadliest_hurricane(hurricane_dict)
print("Deadliest Hurricane:")
print(deadliest_hurricane)
print("\n")

# 7. Categorize hurricanes by mortality
hurricanes_by_mortality = categorize_by_mortality(hurricane_dict)
print("Hurricanes by Mortality:")
print(hurricanes_by_mortality)
print("\n")

# 8. Find the hurricane with maximum damage
max_damage_hurricane = find_max_damage_hurricane(hurricane_dict)
print("Hurricane with Maximum Damage:")
print(max_damage_hurricane)
print("\n")

# 9. Categorize hurricanes by damage
hurricanes_by_damage = categorize_by_damage(hurricane_dict, damage_scale)
print("Hurricanes by Damage:")
print(hurricanes_by_damage)